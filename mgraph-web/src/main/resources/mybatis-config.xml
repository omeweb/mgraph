<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 更多可以参见：http://mybatis.github.io/mybatis-3/configuration.html -->

	<!-- 引入外部properties配置文件，后面内容则通过${属性名}来引用属性值 在使用实例化SqlSessionFactory时，还可以通过new 
		SqlSessionFactoryBuilder.build(config.xml的InputStream实例, Properties实例)来设置属性值。 
		优先级从高到低是： 1. 通过build方法入参设置 2. 通过resource引入的属性 3. 通过property标签设置的属性 -->

	<!-- 这里可以来修改配置值   resource="config.properties"-->
	<properties>
		<property name="driver" value="org.sqlite.JDBC" />
		<property name="url" value="jdbc:sqlite:d:/my-files/xml5.db" />
	</properties>

	<!--强制指定MyBatis使用log4j作为日志日志框架，若不指定那么当部署到如Tomcat等应用容器时，会被容器设置为使用common-logging来记录日志 -->
	<settings>
		<setting name="logImpl" value="LOG4J" />
		<setting name="cacheEnabled" value="true" />
		<setting name="lazyLoadingEnabled" value="true" />
		<setting name="multipleResultSetsEnabled" value="true" />
		<setting name="useColumnLabel" value="true" />
		<setting name="useGeneratedKeys" value="false" />
		<setting name="autoMappingBehavior" value="PARTIAL" />
		<setting name="defaultExecutorType" value="SIMPLE" />
		<setting name="defaultStatementTimeout" value="25" />
		<setting name="safeRowBoundsEnabled" value="false" />
		<setting name="mapUnderscoreToCamelCase" value="false" />
		<setting name="localCacheScope" value="SESSION" />
		<setting name="jdbcTypeForNull" value="OTHER" />
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
	</settings>

	<!--设置自定义JAVA类型的别名，否则在映射文件中的resultType、parameterType等特性值就需要填写全限定类名才有效 -->
	<!-- 这时对于包下的类，在映射文件中的resultType、parameterType等特性值，我们只需写类名或首字母小写的类名 当自定义JAVA类配合@Aliase("别名")使用时，只需写别名即可，且不区分大小写 
		MyBatis对JAVA原生类型定义了内置别名： `int`,`long`等就是`_int`,`_long` `Integer`,`String`就是`int`,`string` -->

	<typeAliases>
		<package name="com.taobao.mgraph.domain"></package>
	</typeAliases>

	<environments default="dev">
		<!--运行环境配置 -->
		<environment id="dev">
			<!-- type属性用于指定事务管理器类型 JDBC：使用JDBC的提交和回滚设置，依赖从数据源获取的连接来管理事务范围。 MANAGED：让容器（如Spring）来管理事务的生命周期。默认情况会关闭连接， 
				若不想关闭连接则需要如下配置： <transactionManager type="MANAGED"> <property name="closeConnection" 
				value="false"/> </transactionManager> -->
			<transactionManager type="JDBC"></transactionManager>
			<!-- type属性用于指定连接池类型 UNPOOLED：连接用完就关闭，不放到连接池 POOLED：连接用完则放在连接池 -->
			<dataSource type="POOLED">
				<property name="driver" value="${driver}" />
				<property name="url" value="${url}" />
				<!--虽然sqlite不用填写username和password，但这两个节点必须保留，否则将报错 -->
				<property name="username" value="${username}" />
				<property name="password" value="${password}" />
			</dataSource>
		</environment>
	</environments>

	<!--向MyBatis注册映射信息 -->
	<mappers>
		<mapper resource="mybatis-sqlmap/message.xml"></mapper>
	</mappers>

</configuration>